name: Deploy based on Tag

on:
  push:
    tags:
      - 'v*-stage'   # Тег для stage окружения
      - 'v*-prod'    # Тег для prod окружения

jobs:
  deploy:
    name: Deploy based on Tag
    runs-on: ubuntu-latest

    steps:
    # Шаг 1: Checkout репозиторий
    - name: Checkout repository
      uses: actions/checkout@v2

    # Шаг 2: Настройка SSH-агента для подключения к серверу
    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.DEPLOY_KEY }}

    # Шаг 3: Определение окружения по тегу
    - name: Set environment
      id: set-env
      run: |
        if [[ "${GITHUB_REF}" == *-stage ]]; then
          echo "::set-output name=ENV::stage"
        elif [[ "${GITHUB_REF}" == *-prod ]]; then
          echo "::set-output name=prod"
        fi

    # Шаг 4: Копирование файлов на сервер
    - name: Copy files to server
      run: |
        scp -r -o StrictHostKeyChecking=no * ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/var/www/calories_bot

    # Шаг 5: Деплой на сервере с использованием переменных окружения из GitHub Secrets
    - name: Deploy on server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd /var/www/calories_bot
          
          # Удаление старого контейнера
          docker rm -f calories_bot || true
          
          # Сборка нового контейнера
          docker build -t calories_bot .

          # Запуск нового контейнера с переменными из GitHub Secrets
          if [ "${{ steps.set-env.outputs.ENV }}" == "stage" ]; then
            docker run -d --name calories_bot \
              -e OPENAI_API_KEY=${{ secrets.STAGE_OPENAI_API_KEY }} \
              -e TELEGRAM_BOT_TOKEN=${{ secrets.STAGE_TELEGRAM_BOT_TOKEN }} \
              -e PROVIDER_TOKEN=${{ secrets.STAGE_PROVIDER_TOKEN }} \
              -e DATABASE=${{ secrets.STAGE_DB_NAME }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e HOST=${{ secrets.SERVER_IP }} \
              -e LOG_ENV=stage \
              -e RATE_LIMIT=2 \
              -e SECRET_WORD=${{ secrets.SECRET_WORD }} \
              -e GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }} \
              -e PRIVATE_KEY_ID=${{ secrets.PRIVATE_KEY_ID }} \
              -e PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}" \
              -e CLIENT_EMAIL=${{ secrets.CLIENT_EMAIL }} \
              -e CLIENT_ID=${{ secrets.CLIENT_ID }} \
              -e CERT_URL=${{ secrets.CERT_URL }} \
              -e PROJECT_ID=${{ secrets.PROJECT_ID }} \
              calories_bot
          else
            docker run -d --name calories_bot \
              -e OPENAI_API_KEY=${{ secrets.PROD_OPENAI_API_KEY }} \
              -e TELEGRAM_BOT_TOKEN=${{ secrets.PROD_TELEGRAM_BOT_TOKEN }} \
              -e PROVIDER_TOKEN=${{ secrets.PROD_PROVIDER_TOKEN }} \
              -e DATABASE=${{ secrets.PROD_DB_NAME }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e HOST=${{ secrets.SERVER_IP }} \
              -e LOG_ENV=prod \
              -e RATE_LIMIT=50 \
              -e SECRET_WORD=${{ secrets.SECRET_WORD }} \
              -e GOOGLE_PROJECT_ID=${{ secrets.GOOGLE_PROJECT_ID }} \
              -e PRIVATE_KEY_ID=${{ secrets.PRIVATE_KEY_ID }} \
              -e PRIVATE_KEY="${{ secrets.PRIVATE_KEY }}" \
              -e CLIENT_EMAIL=${{ secrets.CLIENT_EMAIL }} \
              -e CLIENT_ID=${{ secrets.CLIENT_ID }} \
              -e CERT_URL=${{ secrets.CERT_URL }} \
              -e PROJECT_ID=${{ secrets.PROJECT_ID }} \
              calories_bot
          fi
        EOF
